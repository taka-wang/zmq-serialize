// Code generated by protoc-gen-go.
// source: type.proto
// DO NOT EDIT!

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	type.proto

It has these top-level messages:
	CmdHeader
	MbTcpHeader
	MbWriteRequest
	MbTcpSingleWriteReq
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type CmdHeader struct {
	Receiver string `protobuf:"bytes,1,opt,name=receiver" json:"receiver,omitempty"`
	Sender   string `protobuf:"bytes,2,opt,name=sender" json:"sender,omitempty"`
	Version  uint32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	Tid      uint64 `protobuf:"varint,4,opt,name=tid" json:"tid,omitempty"`
	Method   string `protobuf:"bytes,5,opt,name=method" json:"method,omitempty"`
}

func (m *CmdHeader) Reset()                    { *m = CmdHeader{} }
func (m *CmdHeader) String() string            { return proto.CompactTextString(m) }
func (*CmdHeader) ProtoMessage()               {}
func (*CmdHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type MbTcpHeader struct {
	Ip   string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	Id   uint32 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

func (m *MbTcpHeader) Reset()                    { *m = MbTcpHeader{} }
func (m *MbTcpHeader) String() string            { return proto.CompactTextString(m) }
func (*MbTcpHeader) ProtoMessage()               {}
func (*MbTcpHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type MbWriteRequest struct {
	Code     uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Register uint32 `protobuf:"varint,2,opt,name=register" json:"register,omitempty"`
	Value    string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	Type     string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	Alias    string `protobuf:"bytes,5,opt,name=alias" json:"alias,omitempty"`
}

func (m *MbWriteRequest) Reset()                    { *m = MbWriteRequest{} }
func (m *MbWriteRequest) String() string            { return proto.CompactTextString(m) }
func (*MbWriteRequest) ProtoMessage()               {}
func (*MbWriteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type MbTcpSingleWriteReq struct {
	CmdHeader      *CmdHeader      `protobuf:"bytes,1,opt,name=cmd_header,json=cmdHeader" json:"cmd_header,omitempty"`
	MbTcpHeader    *MbTcpHeader    `protobuf:"bytes,2,opt,name=mb_tcp_header,json=mbTcpHeader" json:"mb_tcp_header,omitempty"`
	MbWriteRequest *MbWriteRequest `protobuf:"bytes,3,opt,name=mb_write_request,json=mbWriteRequest" json:"mb_write_request,omitempty"`
}

func (m *MbTcpSingleWriteReq) Reset()                    { *m = MbTcpSingleWriteReq{} }
func (m *MbTcpSingleWriteReq) String() string            { return proto.CompactTextString(m) }
func (*MbTcpSingleWriteReq) ProtoMessage()               {}
func (*MbTcpSingleWriteReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MbTcpSingleWriteReq) GetCmdHeader() *CmdHeader {
	if m != nil {
		return m.CmdHeader
	}
	return nil
}

func (m *MbTcpSingleWriteReq) GetMbTcpHeader() *MbTcpHeader {
	if m != nil {
		return m.MbTcpHeader
	}
	return nil
}

func (m *MbTcpSingleWriteReq) GetMbWriteRequest() *MbWriteRequest {
	if m != nil {
		return m.MbWriteRequest
	}
	return nil
}

func init() {
	proto.RegisterType((*CmdHeader)(nil), "main.CmdHeader")
	proto.RegisterType((*MbTcpHeader)(nil), "main.MbTcpHeader")
	proto.RegisterType((*MbWriteRequest)(nil), "main.MbWriteRequest")
	proto.RegisterType((*MbTcpSingleWriteReq)(nil), "main.MbTcpSingleWriteReq")
}

var fileDescriptor0 = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x52, 0x31, 0x4f, 0xf3, 0x30,
	0x10, 0x55, 0xda, 0xb4, 0xdf, 0x97, 0x8b, 0xd2, 0xaf, 0x9f, 0xa9, 0x50, 0xc4, 0x84, 0x32, 0x31,
	0x65, 0x28, 0x62, 0x45, 0x42, 0x2c, 0x2c, 0x5d, 0x0c, 0x12, 0x63, 0x95, 0xc4, 0xa7, 0xd6, 0x52,
	0x9d, 0x04, 0xc7, 0x2d, 0x62, 0x43, 0xe2, 0x6f, 0xf1, 0xe3, 0xb0, 0xcf, 0x49, 0x54, 0xb6, 0xf7,
	0x72, 0xf7, 0xee, 0xee, 0xbd, 0x18, 0xc0, 0x7c, 0xb4, 0x98, 0xb7, 0xba, 0x31, 0x0d, 0x0b, 0x55,
	0x21, 0xeb, 0xec, 0x2b, 0x80, 0xe8, 0x51, 0x89, 0x27, 0x2c, 0x04, 0x6a, 0x76, 0x05, 0x7f, 0x35,
	0x56, 0x28, 0x4f, 0xa8, 0xd3, 0xe0, 0x3a, 0xb8, 0x89, 0xf8, 0xc8, 0xd9, 0x25, 0xcc, 0x3b, 0xac,
	0x6d, 0x57, 0x3a, 0xa1, 0x4a, 0xcf, 0x58, 0x0a, 0x7f, 0x6c, 0xb9, 0x93, 0x4d, 0x9d, 0x4e, 0x6d,
	0x21, 0xe1, 0x03, 0x65, 0x4b, 0x98, 0x1a, 0x29, 0xd2, 0xd0, 0x7e, 0x0d, 0xb9, 0x83, 0x6e, 0x86,
	0x42, 0xb3, 0x6f, 0x44, 0x3a, 0xf3, 0x33, 0x3c, 0xcb, 0x1e, 0x20, 0xde, 0x94, 0x2f, 0x55, 0xdb,
	0x9f, 0xb1, 0x80, 0x89, 0x6c, 0xfb, 0x03, 0x2c, 0x62, 0x0c, 0xc2, 0xb6, 0xd1, 0x86, 0x16, 0x27,
	0x9c, 0x30, 0xf5, 0x88, 0x7e, 0xa3, 0x45, 0xd9, 0x67, 0x00, 0x8b, 0x4d, 0xf9, 0xaa, 0xa5, 0x41,
	0x8e, 0x6f, 0x47, 0xec, 0x8c, 0x93, 0x55, 0x8d, 0x40, 0x1a, 0x64, 0x65, 0x0e, 0x7b, 0x87, 0x3b,
	0xd9, 0x99, 0xde, 0x47, 0xc2, 0x47, 0xce, 0x56, 0x30, 0x3b, 0x15, 0x87, 0x23, 0xd2, 0xd4, 0x88,
	0x7b, 0xe2, 0xa6, 0xb8, 0xd4, 0xc8, 0x46, 0xc4, 0x09, 0xbb, 0xce, 0xe2, 0x20, 0x8b, 0xae, 0xb7,
	0xe1, 0x49, 0xf6, 0x1d, 0xc0, 0x05, 0xd9, 0x78, 0x96, 0xf5, 0xee, 0x80, 0xc3, 0x2d, 0x2c, 0x07,
	0xa8, 0x94, 0xd8, 0xee, 0xc9, 0x1c, 0x5d, 0x13, 0xaf, 0xff, 0xe5, 0x2e, 0xfe, 0x7c, 0x8c, 0x9e,
	0x47, 0xd5, 0xf8, 0x17, 0xee, 0x20, 0x51, 0xe5, 0xd6, 0x54, 0xed, 0x20, 0x99, 0x90, 0xe4, 0xbf,
	0x97, 0x9c, 0x05, 0xc5, 0x63, 0x75, 0x96, 0xda, 0x3d, 0x2c, 0xad, 0xec, 0xdd, 0x6d, 0xdd, 0x6a,
	0x1f, 0x01, 0x39, 0x89, 0xd7, 0xab, 0x41, 0x79, 0x1e, 0x0f, 0x5f, 0xa8, 0x5f, 0xbc, 0x9c, 0xd3,
	0xbb, 0xb8, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x90, 0xe1, 0x83, 0x42, 0x25, 0x02, 0x00, 0x00,
}
